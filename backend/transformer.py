import torch
import torch.nn as nn

import sys

class PatchEmbed(nn.Module):
    def __init__(self, embed_dim):
        super().__init__()

        self.embed_dim = embed_dim

        self.conv_small = nn.Conv1d(in_channels=1, out_channels=embed_dim, kernel_size=10, stride=10) # 10 minute patches
        self.conv_medium = nn.Conv1d(in_channels=1, out_channels=embed_dim, kernel_size=40, stride=40) # 40 minute patches
        self.conv_large = nn.Conv1d(in_channels=1, out_channels=embed_dim, kernel_size=160, stride=160) # 160 minute patches

    """
    Input shape can be:
        35,num_coins, 20480 <-- during training
        1, num_coins, 20480 <-- during real use 
    """
    def forward(self, x):

        batch_size, num_samples = x.shape[:2]

        x = x.view(batch_size * num_samples, 1, -1)

        patches_small = self.conv_small(x)
        patches_medium = self.conv_medium(x)
        patches_large = self.conv_large(x)

        patches_small = patches_small.view(batch_size, num_samples, 2048, self.embed_dim)
        patches_medium = patches_medium.view(batch_size, num_samples, 512, self.embed_dim)
        patches_large = patches_large.view(batch_size, num_samples, 128, self.embed_dim)

        x = torch.cat((patches_small, patches_medium, patches_large), 2)

        return x

class Attention(nn.Module): # WARNING: THIS VERSION OF THE ATTENTION MODULE WAS GENERATED BY CHATGPT
    def __init__(self, dim, n_heads=12, qkv_bias=True, attn_p=0, proj_p=0.):
        super().__init__()
        self.n_heads = n_heads
        self.dim = dim
        self.head_dim = dim // n_heads
        self.scale = self.head_dim ** -0.5

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_p)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_p)

    def forward(self, x):
        batch_size, n_samples, n_tokens, dim = x.shape
        if dim != self.dim:
            raise ValueError

        # Reshape and compute query, key, values
        qkv = self.qkv(x).reshape(batch_size, n_samples, n_tokens, 3, self.n_heads, self.head_dim)
        qkv = qkv.permute(3, 0, 1, 4, 2, 5)  # rearrange to [3, batch_size, n_samples, n_heads, n_tokens, head_dim]

        q, k, v = qkv[0], qkv[1], qkv[2]
        k_t = k.transpose(-2, -1)

        # Scaled Dot-Product Attention
        dp = (q @ k_t) * self.scale
        attn = dp.softmax(dim=-1)
        attn = self.attn_drop(attn)

        weighted_avg = attn @ v
        weighted_avg = weighted_avg.transpose(3, 4).reshape(batch_size, n_samples, n_tokens, -1)

        # Final linear layer and dropout
        x = self.proj(weighted_avg)
        x = self.proj_drop(x)

        return x

class MLP(nn.Module):
    def __init__(self, in_features, hidden_features, out_features, p=0.):
        super().__init__()
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = nn.GELU()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(p)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)

        return x
    
class Block(nn.Module):
    def __init__(self, dim, n_heads, mlp_ratio=4.0, qkv_bias=True, p=0., attn_p=0.):
        super().__init__()
        self.norm1 = nn.LayerNorm(dim, eps=1e-6) 
        self.attn = Attention(
            dim,
            n_heads=n_heads,
            qkv_bias=qkv_bias,
            attn_p=attn_p,
            proj_p=p
        )
        self.norm2 = nn.LayerNorm(dim, eps=1e-6)
        hidden_features = int(dim * mlp_ratio)
        self.mlp = MLP(
            in_features=dim,
            hidden_features=hidden_features,
            out_features=dim
        )

    def forward(self, x):
        x = x + self.attn(self.norm1(x))
        x = x + self.mlp(self.norm2(x))

        return x

class Transformer(nn.Module):
    def __init__(self,
                 embed_dim=324,
                 n_heads=12,
                 mlp_ratio=4.,
                 qkv_bias=True,
                 p=0,
                 attn_p=0.):
        super().__init__()

        self.embed_dim = embed_dim

        self.n_patches = 2688

        self.patch_embed = PatchEmbed(embed_dim=self.embed_dim)

        self.cls_token = nn.Parameter(torch.zeros(1, 1, 1, self.embed_dim))
        
        self.pos_embed = nn.Parameter(torch.zeros(1, self.n_patches + 1, self.embed_dim))

        self.pos_drop = nn.Dropout(p)

        self.blocks = nn.ModuleList(
            [
                Block(
                    dim=self.embed_dim,
                    n_heads=n_heads,
                    mlp_ratio=mlp_ratio,
                    qkv_bias=qkv_bias,
                    p=p,
                    attn_p=attn_p
                )
                for _ in range(12)
            ]
        )

        self.norm = nn.LayerNorm(self.embed_dim, eps=1e-6)

        self.normalize = nn.Hardtanh(0, 1)

        self.head = nn.Linear(self.embed_dim, 3)

    def forward(self, x):
        
        x = x.unsqueeze(2)

        batch_size = x.shape[0]
        n_samples = x.shape[1]

        x = self.patch_embed(x)

        cls_tokens = self.cls_token.expand(batch_size, n_samples, -1, -1)

        x = torch.cat((cls_tokens, x), dim=2)

        x = x + self.pos_embed

        x = self.pos_drop(x)
        
        for block in self.blocks:
            x = block(x)

        x = self.norm(x)

        cls_token = x[:, :, 0]

        output = self.head(cls_token)

        output = self.normalize(output)

        return output
